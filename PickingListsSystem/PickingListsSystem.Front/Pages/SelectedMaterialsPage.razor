@page "/SelectedMaterialsPage"
@using PickingListsSystem.Dto.Materials
@using PickingListsSystem.Dto.Statement
@using PickingListsSystem.Front.Services
@using PickingListsSystem.Services
@using PickingListsSystem.Services.Contracts;

@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element

@inject IMaterialService _selectedMaterialsService
@inject IStatementService _statementService;
@inject MarkMaterialService _selectedMaterialsService;
@inject SelectedItemsService SelectedItemsService
@inject StatementService _statementService

@inject IJSRuntime JSRuntime


<PageTitle>Selected Materials</PageTitle>

<MudTable Items="@selectedMaterial" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Mark</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Unit</MudTh>
        <MudTh>Gost</MudTh>
        <MudTh>RB</MudTh>
        <MudTh>RL</MudTh>
        <MudTh>RH</MudTh>
        <MudTh>V</MudTh>
        <MudTh>Weight</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Mark">@context.MaterialMark</MudTd>
        <MudTd DataLabel="Name">@context.MaterialName</MudTd>
        <MudTd DataLabel="Unit">@context.MaterialUnit</MudTd>
        <MudTd DataLabel="Gost">@context.MaterialGost</MudTd>
        <MudTd DataLabel="RB">@context.MaterialRB</MudTd>
        <MudTd DataLabel="Rl">@context.MaterialRL</MudTd>
        <MudTd DataLabel="RH">@context.MaterialRH</MudTd>
        <MudTd DataLabel="V">@context.MaterialV</MudTd>
        <MudTd DataLabel="Weight">@context.MaterialWeight</MudTd>
        <MudTd DataLabel="Type">@context.MaterialType</MudTd>
        <MudTd DataLabel="Actions">
            <div style="display: flex; align-items: center;">
                <MudTableCell>@("Элементов: " + clickCounts[@context.Id])</MudTableCell>
                <MudButton OnClick="@(() => DeleteMaterial(@context.Id))" Variant="Variant.Filled" Color="Color.Primary" Style="margin-left: 50px;">Удалить</MudButton>
            </div>
        </MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTr>
            <MudTd Colspan="10">
                <MudButton OnClick="@(() => SaveToDatabase())" Variant="Variant.Filled" Color="Color.Primary">Отправить оператору</MudButton>
            </MudTd>
        </MudTr>
    </FooterContent>
</MudTable>

@if (selectedStatementMaterials != null)
{
    <h4>Содержимое ведомостей</h4>
    <MudTable Items="@selectedStatementMaterials" Hover="true" Breakpoint="Breakpoint.Sm">
    @*<MudTable Items="@selectedStatementMaterials.Where(x => StatementIDonly.Contains(x.Id))" Hover="true" Breakpoint="Breakpoint.Sm">*@
        <HeaderContent>
            <MudTh>Status</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Gost</MudTh>
            <MudTh>RB</MudTh>
            <MudTh>RL</MudTh>
            <MudTh>RH</MudTh>
            <MudTh>V</MudTh>
            <MudTh>Weight</MudTh>
            <MudTh>Type</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Status">@context.StatementStatus</MudTd>
            <MudTd DataLabel="Date">@context.StatementDate</MudTd>
            <MudTd DataLabel="Name">@foreach(var materialname in context.Materials){@materialname.MaterialName<br>}</MudTd>
            <MudTd DataLabel="Unit">@foreach(var unitname in context.Materials){@unitname.MaterialUnit<br>}</MudTd>
            <MudTd DataLabel="Gost">@foreach(var go in context.Materials){@go.MaterialGost<br>}</MudTd>
            <MudTd DataLabel="RB">@foreach(var rb in context.Materials){@rb.MaterialRB<br>}</MudTd>
            <MudTd DataLabel="RL">@foreach(var rl in context.Materials){@rl.MaterialRL<br>}</MudTd>
            <MudTd DataLabel="RH">@foreach(var rh in context.Materials){@rh.MaterialRH<br>}</MudTd>
            <MudTd DataLabel="V">@foreach(var v in context.Materials){@v.MaterialV<br>}</MudTd>
            <MudTd DataLabel="Weight">@foreach(var w in context.Materials){@w.MaterialWeight<br>}</MudTd>
            <MudTd DataLabel="Type">@foreach(var t in context.Materials){@t.MaterialType<br>}</MudTd>
            <MudTd DataLabel="Actions">
                @*@if (context.StatementStatus == "Утвержден, Обрабатывается")*@ 
                @if (context.StatementStatus == "Утвержден")
                {
                    <MudButton OnClick="@(() => DownloadStatement(@context.Id))" Variant="Variant.Filled" Color="Color.Primary">Скачать</MudButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
    <div style="margin-top: 20px;">
        <MudButton OnClick="@LoadSelectedStatementMaterials" Variant="Variant.Filled" Color="Color.Primary">Обновить таблицу</MudButton>
    </div>
}

@code {
    private List<MaterialDto> selectedMaterial;

    private List<StatementDto> selectedStatementMaterials;
    private List<int> StatementIDonly = new List<int>();

    private int selectedMaterialId;
    private Dictionary<int, int> clickCounts;


    protected override async Task OnInitializedAsync()
    {
        var (selectedMaterials, counts) = MarkMaterialService.GetSelectedMaterial();
        selectedMaterial = selectedMaterials.ToList();
        clickCounts = counts;

        selectedStatementMaterials = await _statementService.GetStatement();
    }

    private void SetSelectedMaterialId(int id)
    {
        selectedMaterialId = id;
        StateHasChanged(); 
    }

    private async Task DeleteMaterial(int itemId)
    {
        await MarkMaterialService.DeleteSelectedMaterial(itemId);
        var (selectedMaterials, counts) = MarkMaterialService.GetSelectedMaterial();
        selectedMaterial = selectedMaterials.ToList();
        clickCounts = counts;
        StateHasChanged();
    }

    private async Task SaveToDatabase()
    {
        var projectId = SelectedItemsService.ProjectId;
        var workId = SelectedItemsService.WorkId;
        var materialIds = selectedMaterial.Select(m => m.Id).ToList();
        await _statementService.AddToStatement(projectId, workId, materialIds);
    }

    private async Task LoadSelectedStatementMaterials()
    {
        selectedStatementMaterials = await _statementService.GetStatement();
        StateHasChanged();
    }

    private async Task DownloadStatement(int statementId)
    {
        var statement = selectedStatementMaterials.FirstOrDefault(s => s.Id == statementId);
        if (statement != null)
        {
            var pdfBytes = await GeneratePDF(statement);
            await JSRuntime.InvokeVoidAsync("downloadFile", $"Statement_{statementId}.pdf", Convert.ToBase64String(pdfBytes));
        }
    }

    private Task<byte[]> GeneratePDF(StatementDto statement)
    {
        using (var memoryStream = new MemoryStream())
        {

            try
            {
                var writer = new PdfWriter(memoryStream);
                var pdf = new PdfDocument(writer);
                var document = new Document(pdf);

                // Add content to PDF
                document.Add(new Paragraph($"Statement ID: {statement.Id}"));
                document.Add(new Paragraph($"Status: {statement.StatementStatus}"));
                document.Add(new Paragraph($"Date: {statement.StatementDate}"));

                // Add materials to PDF
                foreach (var material in statement.Materials)
                {
                    document.Add(new Paragraph($"Name: {material.MaterialName}\n Unit: {material.MaterialUnit}\n Gost: {material.MaterialGost}\n Weight:{material.MaterialWeight}\n"));
                }

                document.Close();
                return Task.FromResult(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
    //
    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("Mess");
        base.OnAfterRender(firstRender);
    }

}