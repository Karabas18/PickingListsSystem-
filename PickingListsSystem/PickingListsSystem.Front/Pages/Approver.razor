@page "/Approver"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@using PickingListsSystem.Dto.Project
@using PickingListsSystem.Dto.Statement
@using PickingListsSystem.Dto.Work
@using PickingListsSystem.Services
@using PickingListsSystem.Services.Contracts



@inject IStatementService _statementService
@inject NavigationManager Navigation
@inject SelectedItemsService SelectedItemsService

@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Ведомости</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>


<div style="margin-bottom: 20px;">
    <MudButton OnClick="@RefreshStatements" Variant="Variant.Filled" Color="Color.Primary">Обновить</MudButton>
</div>


@if (isLoading)
{
    <p>Загрузка...</p>
}
else
{
    @foreach (var statement in statements)
    {
         <MudCard class="mb-4">
            <MudCardContent>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3>Ведомость</h3>
                        <p><strong>Статус:</strong> @statement.StatementStatus</p>
                        <p><strong>Дата:</strong> @statement.StatementDate?.ToString("dd-MM-yyyy")</p>
                    </div>
                    <div>
                        @if (statement.StatementStatus == "Обрабатывается")
                        {
                            <MudButton OnClick="() => ApproveStatement(statement)" Color="Color.Success" Variant="Variant.Filled" Class="mr-2">Одобрить</MudButton>
                        }
                        <MudButton OnClick="() => RejectStatement(statement)" Color="Color.Error" Variant="Variant.Filled">Отклонить</MudButton>
                    </div>
                </div>
            </MudCardContent>
        </MudCard>

        <MudCard class="mt-4 mb-4">
            <MudCardContent>
                <h3>Проект</h3>
                <p><strong>Объект:</strong> @statement.Project.ProjectObject</p>
                <p><strong>План:</strong> @statement.Project.ProjectPlan</p>
                <p><strong>Статус:</strong> @statement.Project.ProjectStatus</p>
            </MudCardContent>
        </MudCard>

        <MudCard class="mt-4 mb-4">
            <MudCardContent>
                <h3>Работа</h3>
                <p><strong>Код работы:</strong> @statement.Work.WorkCode</p>
                <p><strong>Описание:</strong> @statement.Work.WorkDescription</p>
            </MudCardContent>
        </MudCard>

        <MudTable Items="statement.Materials" Hover="true" Breakpoint="Breakpoint.Sm" Class="mb-4">
            <HeaderContent>
                <MudTh>Марка материала</MudTh>
                <MudTh>Название</MudTh>
                <MudTh>Единица измерения</MudTh>
                <MudTh>ГОСТ</MudTh>
                <MudTh>Вес</MudTh>
            </HeaderContent>
            <RowTemplate Context="material">
                <MudTd DataLabel="Марка материала">@material.MaterialMark</MudTd>
                <MudTd DataLabel="Название">@material.MaterialName</MudTd>
                <MudTd DataLabel="Единица измерения">@material.MaterialUnit</MudTd>
                <MudTd DataLabel="ГОСТ">@material.MaterialGost</MudTd>
                <MudTd DataLabel="Вес">@material.MaterialWeight</MudTd>
            </RowTemplate>
        </MudTable>
    }
}

</Authorized>
    <NotAuthorized>
        <p>У вас нет прав для просмотра этой страницы.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<StatementDto> statements;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var allStatements = await _statementService.GetStatement();
        //statements = allStatements.Where(s => s.StatementStatus == "Обрабатывается").ToList();
        statements = allStatements;
        isLoading = false;
    }

    private async Task ApproveStatement(StatementDto statement)
    {
        // Устанавливаем новый статус ведомости
        statement.StatementStatus = "Утвержден";
    
        // Вызываем метод обновления ведомости через HTTP запрос
        await _statementService.UpdateStatement(statement);
        //await RefreshStatements();
    }

     private async Task RejectStatement(StatementDto statement)
    {
        // Вызываем метод удаления ведомости через HTTP запрос
        await _statementService.DeleteStatement(statement.Id);
        
        // После удаления ведомости обновляем список
        await RefreshStatements();
    }

    private async Task RefreshStatements()
    {
        // Обновляем список ведомостей после удаления
        var allStatements = await _statementService.GetStatement();
        //statements = allStatements.Where(s => s.StatementStatus == "Обрабатывается").ToList();
        statements = allStatements;
    }

}